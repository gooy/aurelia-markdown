{"version":3,"sources":["markdown.js"],"names":[],"mappings":";;;+EAOa,QAAQ;;;;;;;;AAyCrB,WAAS,MAAM,CAAC,GAAG,EAAC;AAClB,QAAI,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC;AACzC,QAAI,CAAC,KAAK,EAAE,OAAO,GAAG,CAAC;;AAEvB,QAAI,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,EAAE;AACxD,aAAO,EAAE,CAAC,MAAM,CAAC;KAClB,CAAC,CAAC,CAAC;;AAEJ,QAAI,EAAE,GAAG,IAAI,MAAM,CAAC,UAAU,GAAG,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;AACrD,WAAO,MAAM,GAAG,CAAC,GAAG,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;GAC/C;;;mCA1DO,QAAQ;iCAAC,MAAM;wCAAC,aAAa;gDAAC,qBAAqB;;;;;;;AAO9C,cAAQ;;;;8BAAR,QAAQ;;uBAElB,QAAQ;;mBAAS,IAAI;;;;;iBAEN,CAAC,OAAO,CAAC;;;;AACd,iBALA,QAAQ,CAKP,OAAO,EAAC;;;;;AAClB,cAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AACvB,cAAI,CAAC,SAAS,GAAG,IAAI,QAAQ,CAAC,SAAS,EAAE,CAAC;SAC3C;;8BARU,QAAQ;;iBAUX,oBAAE;AACR,gBAAI,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC;AACpD,gBAAG,CAAC,IAAI,CAAC,KAAK,EAAE;AACd,kBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAC3C,MAAI;AACH,kBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC/B;WACF;;;iBAEW,wBAAE;AACZ,gBAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;WAC/B;;;iBAEW,sBAAC,QAAQ,EAAC;AACpB,gBAAG,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO;AACtB,gBAAI,CAAC,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAChE,gBAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;;;;;;AACnD,mCAAgB,KAAK,8HAAE;oBAAf,IAAI;;AACV,oBAAI,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;;AAEvB,oBAAI,CAAC,SAAS,GAAG,WAAW,GAAC,CAAC,CAAC;;AAE/B,oBAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;;AAE1B,mBAAG,CAAC,SAAS,GAAG,WAAW,GAAC,CAAC,CAAC;;AAE9B,qBAAK,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC;eAC9B;;;;;;;;;;;;;;;WACF;;;wBAtCU,QAAQ;AAAR,gBAAQ,GADpB,MAAM,CACM,QAAQ,KAAR,QAAQ;AAAR,gBAAQ,GAFpB,aAAa,CAAC,UAAU,CAAC,CAEb,QAAQ,KAAR,QAAQ;AAAR,gBAAQ,GAHpB,qBAAqB,CAGT,QAAQ,KAAR,QAAQ;eAAR,QAAQ","file":"markdown.js","sourceRoot":"/source/","sourcesContent":["import {bindable,noView,customElement,skipContentProcessing} from 'aurelia-framework';\nimport showdown from 'showdown';\nimport prism from 'prism';\n\n@skipContentProcessing\n@customElement(\"markdown\")\n@noView\nexport class Markdown {\n\n  @bindable model = null;\n\n  static inject = [Element];\n  constructor(element){\n    this.element = element;\n    this.converter = new showdown.Converter();\n  }\n\n  attached(){\n    this.root = this.element.shadowRoot || this.element;\n    if(!this.model) {\n      this.valueChanged(this.element.innerHTML);\n    }else{\n      this.valueChanged(this.model);\n    }\n  }\n\n  modelChanged(){\n    this.valueChanged(this.model);\n  }\n\n  valueChanged(newValue){\n    if(!this.root) return;\n    this.root.innerHTML = this.converter.makeHtml(dedent(newValue));\n    var codes = this.root.querySelectorAll('pre code');\n    for(var node of codes) {\n      var c = node.className;\n      //node.classList.remove(c);\n      node.className = \"language-\"+c;\n\n      var pre = node.parentNode;\n      //pre.classList.remove(c);\n      pre.className = \"language-\"+c;\n\n      prism.highlightElement(node);\n    }\n  }\n}\n\nfunction dedent(str){\n  var match = str.match(/^[ \\t]*(?=\\S)/gm);\n  if (!match) return str;\n\n  var indent = Math.min.apply(Math, match.map(function (el) {\n    return el.length;\n  }));\n\n  var re = new RegExp('^[ \\\\t]{' + indent + '}', 'gm');\n  return indent > 0 ? str.replace(re, '') : str;\n}\n"]}